set nocompatible            " Disable vi compatibility

filetype on                 " filetype must be 'on' before setting it 'off'
                            "   otherwise it exits with a bad status and breaks
                            "   git commit.
filetype off                " force reloading *after* pathogen loaded

"set the runtime path to include Vundle and initialize
syntax on
filetype plugin indent on   " enable detection, plugins and indent

" Local dirs (centralize everything)
set backupdir=~/.vim/backups
set directory=~/.vim/swaps

let mapleader=","
let maplocalleader=";"
:nmap \ ,


au Filetype python setlocal expandtab
au VimEnter *  NERDTree
au Filetype c setlocal noexpandtab

colorscheme badwolf
set autoindent
set number
set showcmd
set showmatch
set wildmenu
set wildignore+=*.DS_STORE,*.db,node_modules/**,*.jpg,*.png,*.gif
set incsearch
set hlsearch
set paste
set nopaste
set pastetoggle=<f12>
set autoindent smartindent
set nowrap
set textwidth=80
set softtabstop=4
set tabstop=4
set shiftwidth=4
set shiftround
set smartcase

" --- history / file handling ---
set history=999             " Increase history (default = 20)
set undolevels=999          " Moar undo (default=100)
set autoread                " reload files if changed externally

" --- etc ---
set laststatus=2            " Always show status line
hi StatusLine ctermbg=black ctermfg=black
set report=0
set showmode
set splitbelow splitright
set title

" add useful stuff to title bar (file name, flags, cwd)
" based on @factorylabs
if has('title') && (has('gui_running') || &title)
    set titlestring=
    set titlestring+=%f
    set titlestring+=%h%m%r%w
    set titlestring+=\ -\ %{v:progname}
    set titlestring+=\ -\ %{substitute(getcwd(),\ $HOME,\ '~',\ '')}
endif

" use relative line number by default
if exists('+relativenumber')
  set relativenumber
endif

" --- folding---
set foldmethod=manual       " manual fold

" --- list chars ---
" list spaces and tabs to avoid trailing spaces and mixed indentation
" see key mapping at the end of file to toggle `list`
set listchars=tab:▹\ ,trail:·,nbsp:⚋
set fillchars=fold:-
set list


"Remapping
:nnoremap K kk
:nnoremap J jj
:nnoremap <leader><space> :nohlsearch<CR>
:nnoremap f ^
:nnoremap j gj
:nnoremap k gk
:nnoremap F $
:nnoremap L w
:inoremap JK <esc>
:inoremap jk <esc>
:inoremap Jk <esc>
:inoremap z ysiw(


" --- Strips trailing whitespace ---
function! StripWhitespace ()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction

:noremap <leader>ss :call StripWhitespace()<CR>

" --- toggle autocomplete behavior and word delimiters ---

function! KeywordsAll()
    setl iskeyword=@,48-57,192-255,\@,\$,%,-,_
endfunc

function! KeywordsBasic()
    setl iskeyword=@,48-57,192-255
endfunc

" Split line (sister to [J]oin lines)
" The normal use of S is covered by cc, so don't worry about shadowing
nnoremap S i<cr><esc><right>

" Bubble single lines, similar to Eclipse (requires unimpaired.vim)
nmap <C-S-Up> [e
nmap <C-S-Down> ]e

" Bubble multiple lines, similar to Eclipse (requires unimpaired.vim)
vmap <C-S-Up> [egv
vmap <C-S-Down> ]egv

" improve the 'search word under cursor' behavior
nnoremap * :silent call KeywordsAll()<CR> *
nnoremap # :silent call KeywordsAll()<CR> #

" --- COMMON STUFF / HELPERS ---

" Clear the search highlight
nnoremap <silent> \ :silent nohlsearch<CR>

" text wrap: Hard wrap paragraph text (similar to TextMate Ctrl+Q)
nnoremap <leader>tw gqip
nnoremap <leader>nw :set nowrap<CR>

" Pull word under cursor into LHS of a substitute (find and replace)
nnoremap <leader>rr :silent call KeywordsAll()<CR> :%s#\<<C-r>=expand("<cword>")<CR>\>#
" Visually select the text that was last edited/pasted
nnoremap <leader>v `[v`]
" fast Ack
nnoremap <leader>a :tab split<CR>:Ack<Space>
nnoremap <leader>aw :silent call KeywordsAll()<CR> :tab split<CR>:Ack<cword><CR> :silent call KeywordsBasic()<CR>

" Toggle spelling hints
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc


" -----------------------------------------------------------------------------
" FILE HANDLING
" -----------------------------------------------------------------------------

" [autocommands] borrowed from @bit-theory vimfiles and edited
augroup mm_buf_cmds
    " clear commands before resetting
    autocmd!

    " when vimrc is edited, reload it
    autocmd bufwritepost .gvimrc source %
    autocmd bufwritepost .vimrc source %


    " Enable omnicomplete for supported filetypes
    autocmd FileType css,scss setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags

    " make sure `complete` works as expected for CSS class names without
    " messing with motions (eg. '.foo-bar__baz') and we make sure all
    " delimiters (_,-,$,%,.) are treated as word separators outside insert mode
    autocmd InsertEnter,BufLeave * :silent call KeywordsAll()
    autocmd InsertLeave,BufEnter * :silent call KeywordsBasic()
	" highlight char at column 81 (textwidth + 1)
	hi link OverLength Error
    autocmd BufEnter * match OverLength /\%81v/

augroup END

au TabLeave * let g:lasttab = tabpagenr()
nnoremap <silent> <c-m> :exe "tabn ".g:lasttab<cr>
vnoremap <silent> <c-m> :exe "tabn ".g:lasttab<cr>
set tags=tags
set surround
set multiple-cursors
